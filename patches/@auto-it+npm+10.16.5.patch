diff --git a/node_modules/@auto-it/npm/dist/set-npm-token.js b/node_modules/@auto-it/npm/dist/set-npm-token.js
index c17f922..6168279 100644
--- a/node_modules/@auto-it/npm/dist/set-npm-token.js
+++ b/node_modules/@auto-it/npm/dist/set-npm-token.js
@@ -10,6 +10,7 @@ const user_home_1 = tslib_1.__importDefault(require("user-home"));
 const package_json_utils_1 = require("@auto-it/package-json-utils");
 const utils_1 = require("./utils");
 const { isCi } = env_ci_1.default();
+const fs = require('fs');
 exports.DEFAULT_REGISTRY = "https://registry.npmjs.org";
 /** Get the registry for the project */
 exports.getRegistry = async () => {
@@ -42,12 +43,15 @@ async function setTokenOnCI(logger) {
         logger.verbose.info("NPM token not set for private package.");
         return;
     }
-    const rc = path_1.default.join(user_home_1.default, ".npmrc");
-    let contents = "";
+    const localRc = path_1.default.join(process.cwd(), '.npmrc')
+    const homeRc = path_1.default.join(user_home_1.default, ".npmrc");
+    const rc = fs.existsSync(localRc) ? localRc : fs.existsSync(homeRc) ? homeRc : localRc
+    let contents = [];
     try {
-        contents = (await utils_1.readFile(rc)).toString();
+        contents = (await utils_1.readFile(rc)).toString().trim().split('\n');
     }
     catch (error) {
+        logger.verbose.info("No existing .npmrc found")
         // No ~/.npmrc set up
     }
     const registry = await exports.getRegistry();
@@ -56,13 +60,13 @@ async function setTokenOnCI(logger) {
     // eslint-disable-next-line no-template-curly-in-string
     const authTokenString = url_join_1.default(url, ":_authToken=${NPM_TOKEN}");
     logger.verbose.info(`Will set authentication token string in ${rc}`);
-    if (contents.indexOf(authTokenString) !== -1) {
+    if (contents.some(line => line.indexOf(authTokenString) !== -1)) {
         logger.verbose.success(`npmrc file, ${rc}, is already setup correctly`);
         return;
     }
-    logger.verbose.info(`Writing authentication token string, ${authTokenString}, to ${rc}`);
-    await utils_1.writeFile(rc, `${contents}\n${authTokenString}`.trim());
-    logger.log.success(`Wrote authentication token string to ${rc}`);
+    // logger.verbose.info(`Writing authentication token string, ${authTokenString}, to ${rc}`);
+    // await utils_1.writeFile(rc, `registry=${registry}\n${authTokenString}`.trim());
+    // logger.log.success(`Wrote authentication token string to ${rc}`);
 }
 exports.default = setTokenOnCI;
 //# sourceMappingURL=set-npm-token.js.map
\ No newline at end of file
